module Module2 where
import Data.Function

-- Полиморфная функция - параметрический полиморфизм
getSecondFrom :: t1 -> t2 -> t3 -> t2
getSecondFrom a b c = b
-- Сколько разных функций (т.е. возвращающих разные значения) можно реализовать с таким объявлением
-- https://stepik.org/lesson/8417/step/4?unit=1555
--a -> a -> b -> a -> a
--Ответ: 3 функции, это :
-- 1) f :: a -> a -> b -> a -> a
-- f a b c d = a
-- 2) f :: a -> a -> b -> a -> a
-- f a b c d = b
-- 3) f :: a -> a -> b -> a -> a
-- f a b c d = d
--
-- Функции высших порядков
-- Передача бинарного оператора (*) и функции h = snd в функцию `on`
-- функция on применяет функцию h на каждый переданный аргумент, а потом к вычеслоенным значениям применяет бинарный оператор g

multSecond = g1 `on` h1
g1 = (*)
h1 = (snd)

multSecondRes = multSecond ('A',2) ('E',7)
-- тут самое интересное в том, что multSecond не принимает аргументов!
-- но, это работает так:
-- так как multSecond эквиваелнтно выражению (on g h), а функция on ожидает оператор (он передан - g), функцию (также передана - h),
-- то нам остается вызвать функцию multSecond таким образом: multSecond arg1 arg2, и это превращается в: on g h arg1 arg2
-- сначала не понял, а потом как афигел от этого
-- это называется бесточечный стиль
--
-- Реализовать свою функцию on3, которая в качестве первого аргумента принимает не бинарный оператор, а трехместную функцию

on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
on3 op f x y z = op (f x) (f y) (f z)
--
-- Композиция функций, бесточечный стиль
doItYourself = f . g . h

f = logBase 2

g = (** 3)

h = max 42

--
--Сколько разных всегда завершающихся функций с типом a -> (a,b) -> a -> (b,a,a) можно реализовать?
--https://stepik.org/lesson/12398/step/5?unit=2828
f1 :: t1 -> (t1,t2) -> t1 -> (t2,t1,t1)
f1 a (b,c) d | True = (c,a,b)
             | True = (c,a,d)
             | True = (c,b,a)
             | True = (c,b,d)
             | True = (c,d,a)
             | True = (c,d,b)
             | True = (c,a,a)
             | True = (c,b,b)
             | True = (c,d,d)
--
